# -*- org-export-html-auto-postamble:nil -*-
#+TITLE: notes
#+OPTIONS: toc:t num:nil ^:nil html5-fancy:t
#+HTML_DOCTYPE: html5
#+STARTUP: hideblocks

#+HTML_HEAD: <link rel="stylesheet" href="data/berger.css" type="text/css">

#+INFOJS_OPT: view:showall toc:t path:data/org-info.js ltoc:nil mouse:nil sdepth:1 tdepth:1

# font
#+HTML: <link href='http://fonts.googleapis.com/css?family=Ubuntu' rel='stylesheet' type='text/css'/>

# Add the following to the <body> tag after export.
#
#   onload="setup();"


type "?" to learn navigation, [[file:index.html][HOME]]


* [2016-10-27 Thu] Installing R, gdal, geos, and proj4 on UW Madison's Center for High Throughput Computing

R is the language I use most often for my work.  The spatial packages
of R that I use very frequently like rgdal, rgeos, and gdalUtils
depend on external software, namely gdal, proj4, and geos.

Here I show how I installed gdal, proj4, and geos on chtc, and pointed
the R packages to these so that they install correctly.

The R part of this tutorial comes from [[http://chtc.cs.wisc.edu/r-jobs.shtml][chtc's website]].  Their site
should be considered authoritative.  I quote them heavily below.  My
effort here is to help people in the future (including myself) to
install gdal etc. on chtc.



** Create the interactive submit file.  Mine is called =interactive_BuildR.sub=

I save it in a directory called "Learn_CHTC"

#+BEGIN_SRC sh :tangle interactive_BuildR.sub
  universe = vanilla
  # Name the log file:
  log = interactive.log

  # Name the files where standard output and error should be saved:
  output = process.out
  error = process.err

  # If you wish to compile code, you'll need the below lines.
  #  Otherwise, LEAVE THEM OUT if you just want to interactively test!
  +IsBuildJob = true
  requirements = (OpSysAndVer =?= "SL6") && ( IsBuildSlot == true )

  # Indicate all files that need to go into the interactive job session,
  #  including any tar files that you prepared:
  # transfer_input_files = R-3.2.5.tar.gz, gdal.tar.gz
  # I comment out the transfer_input_files line because I download tar.gz's from compute node

  # It's still important to request enough computing resources. The below
  #  values are a good starting point, but consider your file sizes for an
  #  estimate of "disk" and use any other information you might have
  #  for "memory" and/or "cpus".
  request_cpus = 1
  request_memory = 1GB
  request_disk = 1GB

  queue

#+END_SRC

#+results:

** transfer interactive submit file to condor submit node
change =erker= to your username and if you don't use =submit-3=, change
that too.  You'll have to be inside the directory that contains
"interactive_BuildR.sub" for this to work.
#+BEGIN_SRC sh
rsync -avz interactive_BuildR.sub erker@submit-3.chtc.wisc.edu:~/
#+END_SRC

#+RESULTS:

** log into submit node and submit job
#+begin_src sh
ssh submit-3.chtc.wisc.edu
condor_submit -i interactive_BuildR.sub
#+end_src

** wait for job to start

** Installing GDAL, Proj4, Geos
Each install is slightly different, but follows the same pattern.
This worked for me on this date, but may not work in the future.
*** GDAL: Download, configure, make, make install gdal, then tar it up
#+BEGIN_SRC sh
  wget http://download.osgeo.org/gdal/gdal-1.9.2.tar.gz # download gdal tarball
  tar -xzf gdal-1.9.2.tar.gz # unzip it
  mkdir gdal # create a directory to install gdal into
  dir_for_build=$(pwd) # create a variable to indicate this directory (gdal doesn't like relative paths)
  cd gdal-1.9.2 # go into the unzipped gdal directory
  ./autogen.sh # run autogen.sh
  ./configure --prefix=$dir_for_build/gdal # run configure, pointing gdal to be installed in the directory you just created (You'll have to change the path)
  make
  make install
  cd ..
  tar -czf gdal.tar.gz gdal #zip up your gdal installation to send back and forth between compute and submit nodes
#+END_SRC

*** Proj4: Download, configure, make, make install proj4 then tar it up
#+BEGIN_SRC sh
  wget https://github.com/OSGeo/proj.4/archive/master.zip
  unzip master.zip
  mkdir proj4
  cd proj.4-master
  ./autogen.sh
  ./configure --prefix=$dir_for_build/proj4
  make
  make install
  cd ..
  tar -czf proj4.tar.gz proj4
#+END_SRC

*** Geos:
#+BEGIN_SRC sh
  wget http://download.osgeo.org/geos/geos-3.6.0.tar.bz2
  tar -xjf geos-3.6.0.tar.bz2 # need to use the "j" argumnet because .bz2 not gz
  mkdir geos
  cd geos-3.6.0
  ./configure --prefix=$dir_for_build/geos # no autogen.sh
  make
  make install
  cd ..
  tar -czf geos.tar.gz geos

#+END_SRC

** Add libs to =LD_LIBRARY_PATH=
I don't actually know what this path is exactly, but adding =gdal/lib=,
=proj4/lib=, and =geos/lib= to the =LD_LIBRARY_PATH= resolved errors I had
related to files not being found when installing in R.  For rgdal the error was
#+begin_src R
  Error in dyn.load(file, DLLpath = DLLpath, ...) :
  unable to load shared object '/home/erker/R-3.2.5/library/rgdal/libs/rgdal.
#+end_src

and lines like this:
#+begin_src R
...
./proj_conf_test: error while loading shared libraries: libproj.so.12: cannot open shared object file: No such file or directory
...
proj_conf_test.c:3: error: conflicting types for 'pj_open_lib'
/home/erker/proj4/include/proj_api.h:169: note: previous declaration of 'pj_open_lib' was here
./proj_conf_test: error while loading shared libraries: libproj.so.12: cannot open shared object file: No such file or directory
...
#+end_src

For rgeos the error was
#+begin_src R
"configure: error: cannot run C compiled programs"
#+end_src

Run this to fix these errors
#+BEGIN_SRC sh
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/gdal/lib:$(pwd)/proj4/lib # this is to install rgdal properly
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/geos/lib # and rgeos
#+END_SRC

If you run:
#+BEGIN_SRC sh
echo $LD_LIBRARY_PATH
#+END_SRC
The output should look something like
#+BEGIN_SRC sh
:/var/lib/condor/execute/slot1/dir_2924969/gdal/lib:/var/lib/condor/execute/slot1/dir_2924969/proj4/lib:/var/lib/condor/execute/slot1/dir_2924969/geos/lib
#+END_SRC


** R: download, untar and move into R source directory, configure, make, make install
As of [2016-10-25 Tue] R 3.3.0 or higher isn't supported on chtc
#+begin_src sh
    wget https://cran.r-project.org/src/base/R-3/R-3.2.5.tar.gz
    tar -xzf R-3.2.5.tar.gz
    cd R-3.2.5
    ./configure --prefix=$(pwd)
    make
    make install
    cd ..
#+end_src

** Install R packages

The installation steps above should have generated an R installation
in the lib64 subdirectory of the installation directory. We can start
R by typing the path to that installation, like so:

#+begin_src sh
R-3.2.5/lib64/R/bin/R
#+end_src

This should open up an R console, which is how we're going to install
any extra R libraries. Install each of the library packages your code
needs by using R's install.packages command.  Use HTTP, not HTTPS for
your CRAN mirror.  I always download from wustl, my alma mater.  For rgdal and rgeos you need to
point the package to gdal, proj4 and geos using configure.args

Change your vector of packages according to your needs.
#+begin_src R

  install.packages('rgdal', type = "source", configure.args=c(
       paste0('--with-gdal-config=',getwd(),'/gdal/bin/gdal-config'),
       paste0('--with-proj-include=',getwd(),'/proj4/include'),
       paste0('--with-proj-lib=',getwd(),'/proj4/lib')))

  install.packages("rgeos", type = "source", configure.args=c(paste0("--with-geos-config=",getwd(),"/geos/bin/geos-config")))

        install.packages(c("gdalUtils",
                           "mlr",
                           "broom",
                           "raster",
                           "plyr",
                           "ggplot2",
                           "dplyr",
                           "tidyr",
                           "stringr",
                           "foreach",
                           "doParallel",
                           "glcm",
                           "randomForest",
                           "kernlab",
                           "irace",
                           "parallelMap",
                           "e1071",
                           "FSelector",
                           "lubridate",
                           "adabag",
                           "gbm"))

#+end_src

Exit R when packages installed
#+begin_src R
q()
#+end_src

** Edit the R executable
#+BEGIN_SRC sh
nano R-3.2.5/lib64/R/bin/R
#+END_SRC

The above will open up the main R executable. You will need to change
the first line, from something like:

#+BEGIN_SRC sh
R_HOME_DIR=/var/lib/condor/execute/slot1/dir_554715/R-3.1.0/lib64/R
#+END_SRC
to
#+BEGIN_SRC sh
R_HOME_DIR=$(pwd)/R
#+END_SRC

Save and close the file. (In nano, this will be CTRL-O, followed by CTRL-X.)

** Move R installation to main directory and Tar so that it will be returned to submit node
#+begin_src R
mv R-3.2.5/lib64/R ./
tar -czvf R.tar.gz R/
#+end_src
** Exit the interactive job
#+BEGIN_SRC sh
exit
#+END_SRC

Upon exiting, the tar.gz files created should be sent back to your
submit node


* [2016-09-23 Fri] Cool Science Image contest
#+CAPTION: MNF transformation of AVIRIS hyperspectral imagery over lakes Mendota, Monona, and Wingra
#+ATTR_HTML: :alt none :title :align center :height 600
[[file:blog_imgs/CoolScienceImage/beautiful_madison_lakes.png]]

I created this image of Madison's lakes using hyperspectral imagery
from NASA's [[http://aviris.jpl.nasa.gov/][AVIRIS sensor]] for the [[http://news.wisc.edu/cool-science-images-2016/][Cool Science Image Contest]].  I threw
it together the week before the contest and was very pleased to be
selected, but I wish that it had been more related to the science that
I do.  It is a minimum noise fraction transformation which is a way to
transform/condense the data from the ~250 bands into the 3 visible
channels (rgb) for maximum information viewing. Originally I intended
to create an image over land, but had great difficulty getting the
mosaicing of the 3 flightlines to be seamless.  You can see the band
across the northern part of lake Mendota from fox bluff to warner bay
that is due to image processing, not something real in the water.  The
image is no doubt cool, but I wish I could say more what the colors
meant (If you're a limnologist and see some meaning, please let me
know).  I think that pink may be related to sand, and green to bright
reflections on the water.  There's probably some algae detection going
on too.  My goal for next year is to make an image that is heavier on
the science and still very cool.

* [2016-09-20 Tue] Field work in northern Wisconsin

Field work provides the opportunity to be outside, help out on
lab-wide projects, and to learn about new research that isn't exactly
in my wheelhouse.  September 8-10 I went to the north woods to help
collect foliar samples as part of a NEON and Townsend lab project to
ultimately predict foliar traits such as morphology, pigments, and
other chemical constituents from hyperspectral imagery to create maps
of these traits.  This was the first year of a five year project.
There's much more to the science behind the goal.  But the aim of this
post is not to explain all that, but rather, to share some images and
the joy of being in the north woods.

#+CAPTION: Trout Lake Research Station, our lodging
#+ATTR_HTML: :alt none :title :align center :height 400
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01830.jpg]]

#+CAPTION: Jablonski grilling Aditya's Famous Chicken
#+ATTR_HTML: :alt none :title :align center :height 400
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01827.jpg]]

#+CAPTION: Always excited for field work
#+ATTR_HTML: :alt none :title :align center :height 400
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01835.jpg]]

#+CAPTION: Always excited for field work
#+ATTR_HTML: :alt none :title :align center :height 600
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01839.jpg]]


#+CAPTION: Aditya fake shooting leaves (for retrieval)
#+ATTR_HTML: :alt none :title :align center :height 400
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01842.jpg]]

#+CAPTION: John fake writing
#+ATTR_HTML: :alt none :title :align center :height 400
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01875.jpg]]

#+CAPTION: Larch Stand
#+ATTR_HTML: :alt none :title :align center :height 400
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01881.jpg]]

#+CAPTION: NEON's Flux Tower.  Measuring the exhange of carbon between atmosphere and biosphere.  Sweet.
#+ATTR_HTML: :alt none :title :align center :height 400
[[file:blog_imgs/FieldWorkUpNorth_Sep8-10/DSC01898.jpg]]

#+CAPTION: Flux tower of Ankur Desai's research group.  Maples creating lovely dappled light.
#+ATTR_HTML: :alt none :title :align center :height 300


#+ATTR_HTML: :width 600 :align center :controls controls
#+BEGIN_video
#+HTML:   <source src="blog_imgs/FieldWorkUpNorth_Sep8-10/Ankur_FluxTower.mov">
#+END_video
Flux tower of Ankur Desai's research group, much smaller than NEON's.  Maples creating lovely dappled light.

* [2016-08-02 Tue] Making this website                              :orgmode:
I use emacs org-mode as the core application for my research.  It
makes sense to use the great org publishing features to create a
website without having to learn many new skills.  I had considered
using jekyll, but ultimately realized that I could make a website that
is just as beautiful and functional with emacs org-mode.

I've looked at tons of websites made with org-mode.  I like [[http://cs.unm.edu/~eschulte/][Eric
Schulte's]] best for an academic personal page, and I wanted to use the
[[http://orgmode.org/manual/JavaScript-support.html][org-info.js]] for a blog with keyboard shortcuts for navigation and
search.

If you're not familiar with [[http://orgmode.org/worg/][org mode]], check it out.

If you are already familiar with org mode, spend twenty minutes
reading about [[http://orgmode.org/manual/Exporting.html#Exporting][exporting to html]] and [[http://orgmode.org/manual/Publishing.html][publishing]].  The manual is pretty
clear.  Once you have a published webpage, check out some css
stylesheets from other org sites that you like.  [[file:data/eric.css][Mine]] is a modified
version of the stylesheet of eric schulte, who I asked permission from
to use.

I spent no more 3 hours setting up the site.  Deciding that this was the
approach I wanted to take and generating the content took a couple
days.

You can clone the github [[https://github.com/TedwardErker/webpage][repo]] to see how I have it set up.

It is great to be able to work on the content of the website in a very
familiar way and export it to the internet with one command.  Amazing.

* [2016-08-02 Tue] Trip to Washington, DC for NASA's Biodiversity and Ecological Forecasting Team Meeting :nasa:travel:
#+CAPTION: Albert Einstein Memorial
#+ATTR_HTML: :alt none :title :align center :height 300
[[file:blog_imgs/DC_NASA_meeting/with_einstein.jpg]]

* [2016-08-01 Mon] Removing Stuck Aluminum Seatpost from a Steel Frame :bike:

*** In short:
Use a sodium hydroxide solution with proper protection and
ventilation. Be patient.  Use rubber stoppers to block holes in frame (bottom bracket
and water bottle braze-ons.

*** In long:
My seatpost had been stuck in my steel frame for years.  Fortunately
it was at the proper height, so it didn't bother me.  When my headset
broke and needed to be replaced, I figured I'd take care of the
seatpost at the same time.  I wasted an incredible amount of time
trying to remove the seatpost and ruined my paint in the process which
required a costly repowdering.  This post is to share my experience so
that you don't have to go through the same thing.

**** What didn't work:
1) Freezing
2) Ammonia
3) Pipe wrench with 5 foot bar
4) combinations of the above
5) Tying it between two trees and trying to pull it apart with 3 men and a
   6-1 mechanical advantage system.
#+CAPTION: We pulled hard, but failed
#+ATTR_HTML: :alt none :title trying to pull seatpost out :align center :height 300
[[file:blog_imgs/free_seatpost/pull_apart.jpg]]
**** What did work:
1) Remove everything from the frame except the seatpost
2) Use a hacksaw to remove seat and create hole to pour solution
   down.  Leave as much of the post as possible to reduce splashing,
   while still creating a large hole to pour solution
   down. [[file:blog_imgs/free_seatpost/post_in_frame.jpg][post in frame]], [[file:blog_imgs/free_seatpost/side_post_in_frame.jpg][side view]]
3) Stop up bottom bracket and braze-ons (any holes that will let the
   sodium hydroxide leak out of the seat tube) with rubber or cork
   stoppers.  I got many of different sizes for less than a dollar at
   the hardware store.
4) Place frame in well ventilated area on something to catch any
   spills (I used a plastic sled in my driveway). [[file:blog_imgs/free_seatpost/setup.jpg][setup]]
5) Add sodium hydroxide salt to water (not water to salt).  I did this
   in an old milk jug.  Sodium hydroxide is sold at your local
   hardware store as lye or drain cleaner.  Check chemical composition
   to verify it is NaOH.  I didn't measure the concentration of the
   solution that I used, but you don't want it to be so concentrated
   that it bubbles violently out of seat tube and destroys your paint.  Also,
   the dissolving of NaOH is exothermic and the milk jug will get
   quite warm, or hot if it's very concentrated.
6) Pour solution into seat tube.  The solution needs to be up to the
   top of the tube so that the part of the post inside the tube will
   dissolve, but filling it up this high risks spashes.  Fill up the
   tube part way to make sure there isn't a ton up bubbling and
   splashing, then fill up to top of _tube_ (not post).  If you didn't saw off too
   much of the post, this length of post sticking out of tube will
   help give you a splash buffer.
   [[file:blog_imgs/free_seatpost/bubbling.jpg][I cut mine too short and the paint was destroyed]]
7) Be patient.  My seat post wall was quite thick, at least 2 mm.
   This will take a long time to dissolve.  Wait until the solution is
   finished reacting with aluminum (you can hear the production of
   hydrogen gas), which may take a few hours.  Then pour out the
   solution from your frame and dispose of the dark grey liquid
   (because I wasn't sure if the NaOH was completely used, I added
   vinegar in an attempt to neutralize the base).
8) Repeat steps 5-7 until the post is completely dissolved or you
   can pull the post out.

#+CAPTION: This is all that was left
#+ATTR_HTML: :alt none :title :align center :height 300
[[file:blog_imgs/free_seatpost/remains.jpg]]
**** I had apex custom coating in Monona, WI repaint my frame.
They did a great job and the price was lower than everywhere else I
looked, but it still wasn't cheap.  Don't let the NaOH stay on your
frame long!

